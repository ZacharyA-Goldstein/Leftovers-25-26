/**
 * build.common.gradle
 *
 * This file contains the necessary content of the 'build.gradle' files for robot controller
 * applications built using the FTC SDK.
 */

import java.util.regex.Pattern

apply plugin: 'com.android.application'

// Load the version.properties file
ext {
    def versionPropsFile = rootProject.file('version.properties')
    if (versionPropsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(versionPropsFile))
        ext.ftcSdkVersion = props['ftc.sdk.version']
    }
}

android {
    compileSdk 34
    
    // Enable Java 8 features
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        
        // Enable core library desugaring for Java 8+ APIs on older Android versions
        coreLibraryDesugaringEnabled true
    }
    
    // Add build config fields for version information
    defaultConfig {
        // Set the application ID (package name) for the app
        applicationId "com.qualcomm.ftcrobotcontroller"
        
        // Set the minimum and target SDK versions
        minSdkVersion 24
        targetSdkVersion 33
        
        // Version code and name
        versionCode 1
        versionName "1.0"
        
        // Enable multidex support
        multiDexEnabled true
        
        // Add test instrumentation runner
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Enable vector drawable support
        vectorDrawables.useSupportLibrary = true
    }
    
    // Configure signing
    signingConfigs {
        release {
            // Try to get signing config from environment variables
            def apkStoreFile = System.getenv("APK_SIGNING_STORE_FILE")
            if (apkStoreFile != null) {
                keyAlias System.getenv("APK_SIGNING_KEY_ALIAS")
                keyPassword System.getenv("APK_SIGNING_KEY_PASSWORD")
                storeFile file(System.getenv("APK_SIGNING_STORE_FILE"))
                storePassword System.getenv("APK_SIGNING_STORE_PASSWORD")
            } else {
                keyAlias 'androiddebugkey'
                keyPassword 'android'
                storeFile rootProject.file('libs/ftc.debug.keystore')
                storePassword 'android'
            }
        }

        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile rootProject.file('libs/ftc.debug.keystore')
            storePassword 'android'
        }
    }

    defaultConfig {
        signingConfig signingConfigs.debug
        applicationId 'com.qualcomm.ftcrobotcontroller'
        minSdkVersion 24
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 28

        /**
         * We keep the versionCode and versionName of robot controller applications in sync with
         * the master information published in the AndroidManifest.xml file of the FtcRobotController
         * module. This helps avoid confusion that might arise from having multiple versions of
         * a robot controller app simultaneously installed on a robot controller device.
         *
         * We accomplish this with the help of a funky little Groovy script that maintains that
         * correspondence automatically.
         *
         * @see <a href="http://developer.android.com/tools/building/configuring-gradle.html">Configure Your Build</a>
         * @see <a href="http://developer.android.com/tools/publishing/versioning.html">Versioning Your App</a>
         */
        def manifestFile = project(':FtcRobotController').file('src/main/AndroidManifest.xml');
        def manifestText = manifestFile.getText()
        //
        def vCodePattern = Pattern.compile("versionCode=\"(\\d+(\\.\\d+)*)\"")
        def matcher = vCodePattern.matcher(manifestText)
        matcher.find()
        def vCode = Integer.parseInt(matcher.group(1))
        //
        def vNamePattern = Pattern.compile("versionName=\"(.*)\"")
        matcher = vNamePattern.matcher(manifestText);
        matcher.find()
        def vName = matcher.group(1)
        //
        versionCode vCode
        versionName vName
    }

    // http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html
    buildTypes {
        release {
            signingConfig signingConfigs.release

            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
        debug {
            debuggable true
            jniDebuggable true
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst '**/*.so'
    }
    ndkVersion '21.3.6528147'
}

// Helper method to get the current Git commit hash
def getGitSha() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        return 'unknown'
    }
}

repositories {
}

